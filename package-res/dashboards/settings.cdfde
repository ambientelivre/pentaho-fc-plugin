{"components":{"rows":[{"id":"PARAMETERS","name":"Parameters","type":"Label","typeDesc":"\u003Ci\u003EGroup\u003C/i\u003E","parent":"UnIqEiD","properties":[{"name":"Group","value":"Parameters","type":"Label"}]},{"id":"db4b1c39-38cb-2f25-d44b-e7905aee0422","type":"ComponentsParameter","typeDesc":"Simple parameter","parent":"PARAMETERS","properties":[{"name":"name","value":"keyValue","type":"Id"},{"name":"propertyValue","value":"Insert new key here...","type":"String"},{"name":"parameterViewRole","value":"unused","type":"parameterViewRoleCustom"},{"name":"bookmarkable","value":"false","type":"Boolean"},{"name":"public","value":"false","type":"Boolean"}],"rowName":"Simple Parameter"},{"id":"STANDARDCOMPONENTS","name":"Standard","type":"Label","typeDesc":"\u003Ci\u003EGroup\u003C/i\u003E","parent":"UnIqEiD","properties":[{"name":"Group","value":"Standard","type":"Label"}]},{"id":"d449e194-f349-d513-45ed-42c1d1ce49a3","type":"ComponentstextareaInput","typeDesc":"Textarea input Component","parent":"STANDARDCOMPONENTS","properties":[{"name":"name","value":"keyValueForm","type":"Id"},{"name":"parameter","value":"${p:keyValue}","type":"Parameter"},{"name":"listeners","value":"[]","type":"Listeners"},{"name":"numColumns","value":"50","type":"Integer"},{"name":"numRows","value":"1","type":"Integer"},{"name":"priority","value":5,"type":"Integer"},{"name":"refreshPeriod","value":"","type":"Integer"},{"name":"htmlObject","value":"${h:${p:keyValueFormObj}}","type":"HtmlObject"},{"name":"executeAtStart","value":"true","type":"Boolean"},{"name":"preExecution","value":"","type":"JavaScript"},{"name":"postExecution","value":"function g()\n{  \n    document.getElementById(\u0027render_keyValueForm\u0027).onkeyup=function()\n    {\n        if(document.getElementById(\u0027render_keyValueForm\u0027).value !== \u0027\u0027)\n        {\n            document.getElementById(\u0022updateimg\u0022).src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-enable.png\u0022;\n        }\n        else{\n            document.getElementById(\u0022updateimg\u0022).src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-disable.png\u0022;\n        }\n    }; \n    \n    document.getElementById(\u0027render_keyValueForm\u0027).onfocus=function()\n    {\n        if(document.getElementById(\u0027render_keyValueForm\u0027).value !== \u0027\u0027)\n        {\n            document.getElementById(\u0027render_keyValueForm\u0027).value = \u0027\u0027;\n            document.getElementById(\u0022updateimg\u0022).src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-disable.png\u0022;\n        }\n    };\n    \n    document.getElementById(\u0027render_keyValueForm\u0027).onkeydown=function()\n    {\n        if(document.getElementById(\u0027render_keyValueForm\u0027).value === \u0027\u0027)\n        {\n            document.getElementById(\u0022updateimg\u0022).src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-disable.png\u0022;\n        }\n        else{\n             document.getElementById(\u0022updateimg\u0022).src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-enable.png\u0022;\n        }\n    };\n    \n} ","type":"JavaScript"},{"name":"preChange","value":"","type":"JavaScript"},{"name":"postChange","value":"","type":"JavaScript"},{"name":"tooltip","value":"","type":"Html"}],"rowName":"Textarea Input Component"}]},"datasources":{"rows":[]},"filename":"/public/settings.cdfde","layout":{"rows":[{"id":"40c95211-d46b-d481-01a6-8776d536e632","type":"LayoutResourceCode","typeDesc":"Resource","parent":"UnIqEiD","properties":[{"name":"name","value":"jqueryFormJs","type":"Id"},{"name":"resourceCode","value":"/*!\n * jQuery Form Plugin\n * version: 3.40.0-2013.08.13\n * @requires jQuery v1.5 or later\n * Copyright (c) 2013 M. Alsup\n * Examples and documentation at: http://malsup.com/jquery/form/\n * Project repository: https://github.com/malsup/form\n * Dual licensed under the MIT and GPL licenses.\n * https://github.com/malsup/form#copyright-and-license\n */\n/*global ActiveXObject */\n;(function($) {\n\u0022use strict\u0022;\n\n/*\n    Usage Note:\n    -----------\n    Do not use both ajaxSubmit and ajaxForm on the same form.  These\n    functions are mutually exclusive.  Use ajaxSubmit if you want\n    to bind your own submit handler to the form.  For example,\n\n    $(document).ready(function() {\n        $(\u0027#myForm\u0027).on(\u0027submit\u0027, function(e) {\n            e.preventDefault(); // \u003C-- important\n            $(this).ajaxSubmit({\n                target: \u0027#output\u0027\n            });\n        });\n    });\n\n    Use ajaxForm when you want the plugin to manage all the event binding\n    for you.  For example,\n\n    $(document).ready(function() {\n        $(\u0027#myForm\u0027).ajaxForm({\n            target: \u0027#output\u0027\n        });\n    });\n\n    You can also use ajaxForm with delegation (requires jQuery v1.7+), so the\n    form does not have to exist when you invoke ajaxForm:\n\n    $(\u0027#myForm\u0027).ajaxForm({\n        delegation: true,\n        target: \u0027#output\u0027\n    });\n\n    When using ajaxForm, the ajaxSubmit function will be invoked for you\n    at the appropriate time.\n*/\n\n/**\n * Feature detection\n */\nvar feature = {};\nfeature.fileapi = $(\u0022\u003Cinput type=\u0027file\u0027/\u003E\u0022).get(0).files !== undefined;\nfeature.formdata = window.FormData !== undefined;\n\nvar hasProp = !!$.fn.prop;\n\n// attr2 uses prop when it can but checks the return type for\n// an expected string.  this accounts for the case where a form \n// contains inputs with names like \u0022action\u0022 or \u0022method\u0022; in those\n// cases \u0022prop\u0022 returns the element\n$.fn.attr2 = function() {\n    if ( ! hasProp )\n        return this.attr.apply(this, arguments);\n    var val = this.prop.apply(this, arguments);\n    if ( ( val \u0026\u0026 val.jquery ) || typeof val === \u0027string\u0027 )\n        return val;\n    return this.attr.apply(this, arguments);\n};\n\n/**\n * ajaxSubmit() provides a mechanism for immediately submitting\n * an HTML form using AJAX.\n */\n$.fn.ajaxSubmit = function(options) {\n    /*jshint scripturl:true */\n\n    // fast fail if nothing selected (http://dev.jquery.com/ticket/2752)\n    if (!this.length) {\n        log(\u0027ajaxSubmit: skipping submit process - no element selected\u0027);\n        return this;\n    }\n\n    var method, action, url, $form = this;\n\n    if (typeof options == \u0027function\u0027) {\n        options = { success: options };\n    }\n    else if ( options === undefined ) {\n        options = {};\n    }\n\n    method = options.type || this.attr2(\u0027method\u0027);\n    action = options.url  || this.attr2(\u0027action\u0027);\n\n    url = (typeof action === \u0027string\u0027) ? $.trim(action) : \u0027\u0027;\n    url = url || window.location.href || \u0027\u0027;\n    if (url) {\n        // clean url (don\u0027t include hash vaue)\n        url = (url.match(/^([^#]+)/)||[])[1];\n    }\n\n    options = $.extend(true, {\n        url:  url,\n        success: $.ajaxSettings.success,\n        type: method || $.ajaxSettings.type,\n        iframeSrc: /^https/i.test(window.location.href || \u0027\u0027) ? \u0027javascript:false\u0027 : \u0027about:blank\u0027\n    }, options);\n\n    // hook for manipulating the form data before it is extracted;\n    // convenient for use with rich editors like tinyMCE or FCKEditor\n    var veto = {};\n    this.trigger(\u0027form-pre-serialize\u0027, [this, options, veto]);\n    if (veto.veto) {\n        log(\u0027ajaxSubmit: submit vetoed via form-pre-serialize trigger\u0027);\n        return this;\n    }\n\n    // provide opportunity to alter form data before it is serialized\n    if (options.beforeSerialize \u0026\u0026 options.beforeSerialize(this, options) === false) {\n        log(\u0027ajaxSubmit: submit aborted via beforeSerialize callback\u0027);\n        return this;\n    }\n\n    var traditional = options.traditional;\n    if ( traditional === undefined ) {\n        traditional = $.ajaxSettings.traditional;\n    }\n\n    var elements = [];\n    var qx, a = this.formToArray(options.semantic, elements);\n    if (options.data) {\n        options.extraData = options.data;\n        qx = $.param(options.data, traditional);\n    }\n\n    // give pre-submit callback an opportunity to abort the submit\n    if (options.beforeSubmit \u0026\u0026 options.beforeSubmit(a, this, options) === false) {\n        log(\u0027ajaxSubmit: submit aborted via beforeSubmit callback\u0027);\n        return this;\n    }\n\n    // fire vetoable \u0027validate\u0027 event\n    this.trigger(\u0027form-submit-validate\u0027, [a, this, options, veto]);\n    if (veto.veto) {\n        log(\u0027ajaxSubmit: submit vetoed via form-submit-validate trigger\u0027);\n        return this;\n    }\n\n    var q = $.param(a, traditional);\n    if (qx) {\n        q = ( q ? (q + \u0027\u0026\u0027 + qx) : qx );\n    }\n    if (options.type.toUpperCase() == \u0027GET\u0027) {\n        options.url += (options.url.indexOf(\u0027?\u0027) \u003E= 0 ? \u0027\u0026\u0027 : \u0027?\u0027) + q;\n        options.data = null;  // data is null for \u0027get\u0027\n    }\n    else {\n        options.data = q; // data is the query string for \u0027post\u0027\n    }\n\n    var callbacks = [];\n    if (options.resetForm) {\n        callbacks.push(function() { $form.resetForm(); });\n    }\n    if (options.clearForm) {\n        callbacks.push(function() { $form.clearForm(options.includeHidden); });\n    }\n\n    // perform a load on the target only if dataType is not provided\n    if (!options.dataType \u0026\u0026 options.target) {\n        var oldSuccess = options.success || function(){};\n        callbacks.push(function(data) {\n            var fn = options.replaceTarget ? \u0027replaceWith\u0027 : \u0027html\u0027;\n            $(options.target)[fn](data).each(oldSuccess, arguments);\n        });\n    }\n    else if (options.success) {\n        callbacks.push(options.success);\n    }\n\n    options.success = function(data, status, xhr) { // jQuery 1.4+ passes xhr as 3rd arg\n        var context = options.context || this ;    // jQuery 1.4+ supports scope context\n        for (var i=0, max=callbacks.length; i \u003C max; i++) {\n            callbacks[i].apply(context, [data, status, xhr || $form, $form]);\n        }\n    };\n\n    if (options.error) {\n        var oldError = options.error;\n        options.error = function(xhr, status, error) {\n            var context = options.context || this;\n            oldError.apply(context, [xhr, status, error, $form]);\n        };\n    }\n\n     if (options.complete) {\n        var oldComplete = options.complete;\n        options.complete = function(xhr, status) {\n            var context = options.context || this;\n            oldComplete.apply(context, [xhr, status, $form]);\n        };\n    }\n\n    // are there files to upload?\n\n    // [value] (issue #113), also see comment:\n    // https://github.com/malsup/form/commit/588306aedba1de01388032d5f42a60159eea9228#commitcomment-2180219\n    var fileInputs = $(\u0027input[type=file]:enabled:not([value=\u0022\u0022])\u0027, this);\n\n    var hasFileInputs = fileInputs.length \u003E 0;\n    var mp = \u0027multipart/form-data\u0027;\n    var multipart = ($form.attr(\u0027enctype\u0027) == mp || $form.attr(\u0027encoding\u0027) == mp);\n\n    var fileAPI = feature.fileapi \u0026\u0026 feature.formdata;\n    log(\u0022fileAPI :\u0022 + fileAPI);\n    var shouldUseFrame = (hasFileInputs || multipart) \u0026\u0026 !fileAPI;\n\n    var jqxhr;\n\n    // options.iframe allows user to force iframe mode\n    // 06-NOV-09: now defaulting to iframe mode if file input is detected\n    if (options.iframe !== false \u0026\u0026 (options.iframe || shouldUseFrame)) {\n        // hack to fix Safari hang (thanks to Tim Molendijk for this)\n        // see:  http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d\n        if (options.closeKeepAlive) {\n            $.get(options.closeKeepAlive, function() {\n                jqxhr = fileUploadIframe(a);\n            });\n        }\n        else {\n            jqxhr = fileUploadIframe(a);\n        }\n    }\n    else if ((hasFileInputs || multipart) \u0026\u0026 fileAPI) {\n        jqxhr = fileUploadXhr(a);\n    }\n    else {\n        jqxhr = $.ajax(options);\n    }\n\n    $form.removeData(\u0027jqxhr\u0027).data(\u0027jqxhr\u0027, jqxhr);\n\n    // clear element array\n    for (var k=0; k \u003C elements.length; k++)\n        elements[k] = null;\n\n    // fire \u0027notify\u0027 event\n    this.trigger(\u0027form-submit-notify\u0027, [this, options]);\n    return this;\n\n    // utility fn for deep serialization\n    function deepSerialize(extraData){\n        var serialized = $.param(extraData, options.traditional).split(\u0027\u0026\u0027);\n        var len = serialized.length;\n        var result = [];\n        var i, part;\n        for (i=0; i \u003C len; i++) {\n            // #252; undo param space replacement\n            serialized[i] = serialized[i].replace(/\\+/g,\u0027 \u0027);\n            part = serialized[i].split(\u0027=\u0027);\n            // #278; use array instead of object storage, favoring array serializations\n            result.push([decodeURIComponent(part[0]), decodeURIComponent(part[1])]);\n        }\n        return result;\n    }\n\n     // XMLHttpRequest Level 2 file uploads (big hat tip to francois2metz)\n    function fileUploadXhr(a) {\n        var formdata = new FormData();\n\n        for (var i=0; i \u003C a.length; i++) {\n            formdata.append(a[i].name, a[i].value);\n        }\n\n        if (options.extraData) {\n            var serializedData = deepSerialize(options.extraData);\n            for (i=0; i \u003C serializedData.length; i++)\n                if (serializedData[i])\n                    formdata.append(serializedData[i][0], serializedData[i][1]);\n        }\n\n        options.data = null;\n\n        var s = $.extend(true, {}, $.ajaxSettings, options, {\n            contentType: false,\n            processData: false,\n            cache: false,\n            type: method || \u0027POST\u0027\n        });\n\n        if (options.uploadProgress) {\n            // workaround because jqXHR does not expose upload property\n            s.xhr = function() {\n                var xhr = $.ajaxSettings.xhr();\n                if (xhr.upload) {\n                    xhr.upload.addEventListener(\u0027progress\u0027, function(event) {\n                        var percent = 0;\n                        var position = event.loaded || event.position; /*event.position is deprecated*/\n                        var total = event.total;\n                        if (event.lengthComputable) {\n                            percent = Math.ceil(position / total * 100);\n                        }\n                        options.uploadProgress(event, position, total, percent);\n                    }, false);\n                }\n                return xhr;\n            };\n        }\n\n        s.data = null;\n            var beforeSend = s.beforeSend;\n            s.beforeSend = function(xhr, o) {\n                o.data = formdata;\n                if(beforeSend)\n                    beforeSend.call(this, xhr, o);\n        };\n        return $.ajax(s);\n    }\n\n    // private function for handling file uploads (hat tip to YAHOO!)\n    function fileUploadIframe(a) {\n        var form = $form[0], el, i, s, g, id, $io, io, xhr, sub, n, timedOut, timeoutHandle;\n        var deferred = $.Deferred();\n\n        // #341\n        deferred.abort = function(status) {\n            xhr.abort(status);\n        };\n\n        if (a) {\n            // ensure that every serialized input is still enabled\n            for (i=0; i \u003C elements.length; i++) {\n                el = $(elements[i]);\n                if ( hasProp )\n                    el.prop(\u0027disabled\u0027, false);\n                else\n                    el.removeAttr(\u0027disabled\u0027);\n            }\n        }\n\n        s = $.extend(true, {}, $.ajaxSettings, options);\n        s.context = s.context || s;\n        id = \u0027jqFormIO\u0027 + (new Date().getTime());\n        if (s.iframeTarget) {\n            $io = $(s.iframeTarget);\n            n = $io.attr2(\u0027name\u0027);\n            if (!n)\n                 $io.attr2(\u0027name\u0027, id);\n            else\n                id = n;\n        }\n        else {\n            $io = $(\u0027\u003Ciframe name=\u0022\u0027 + id + \u0027\u0022 src=\u0022\u0027+ s.iframeSrc +\u0027\u0022 /\u003E\u0027);\n            $io.css({ position: \u0027absolute\u0027, top: \u0027-1000px\u0027, left: \u0027-1000px\u0027 });\n        }\n        io = $io[0];\n\n\n        xhr = { // mock object\n            aborted: 0,\n            responseText: null,\n            responseXML: null,\n            status: 0,\n            statusText: \u0027n/a\u0027,\n            getAllResponseHeaders: function() {},\n            getResponseHeader: function() {},\n            setRequestHeader: function() {},\n            abort: function(status) {\n                var e = (status === \u0027timeout\u0027 ? \u0027timeout\u0027 : \u0027aborted\u0027);\n                log(\u0027aborting upload... \u0027 + e);\n                this.aborted = 1;\n\n                try { // #214, #257\n                    if (io.contentWindow.document.execCommand) {\n                        io.contentWindow.document.execCommand(\u0027Stop\u0027);\n                    }\n                }\n                catch(ignore) {}\n\n                $io.attr(\u0027src\u0027, s.iframeSrc); // abort op in progress\n                xhr.error = e;\n                if (s.error)\n                    s.error.call(s.context, xhr, e, status);\n                if (g)\n                    $.event.trigger(\u0022ajaxError\u0022, [xhr, s, e]);\n                if (s.complete)\n                    s.complete.call(s.context, xhr, e);\n            }\n        };\n\n        g = s.global;\n        // trigger ajax global events so that activity/block indicators work like normal\n        if (g \u0026\u0026 0 === $.active++) {\n            $.event.trigger(\u0022ajaxStart\u0022);\n        }\n        if (g) {\n            $.event.trigger(\u0022ajaxSend\u0022, [xhr, s]);\n        }\n\n        if (s.beforeSend \u0026\u0026 s.beforeSend.call(s.context, xhr, s) === false) {\n            if (s.global) {\n                $.active--;\n            }\n            deferred.reject();\n            return deferred;\n        }\n        if (xhr.aborted) {\n            deferred.reject();\n            return deferred;\n        }\n\n        // add submitting element to data if we know it\n        sub = form.clk;\n        if (sub) {\n            n = sub.name;\n            if (n \u0026\u0026 !sub.disabled) {\n                s.extraData = s.extraData || {};\n                s.extraData[n] = sub.value;\n                if (sub.type == \u0022image\u0022) {\n                    s.extraData[n+\u0027.x\u0027] = form.clk_x;\n                    s.extraData[n+\u0027.y\u0027] = form.clk_y;\n                }\n            }\n        }\n\n        var CLIENT_TIMEOUT_ABORT = 1;\n        var SERVER_ABORT = 2;\n                \n        function getDoc(frame) {\n            /* it looks like contentWindow or contentDocument do not\n             * carry the protocol property in ie8, when running under ssl\n             * frame.document is the only valid response document, since\n             * the protocol is know but not on the other two objects. strange?\n             * \u0022Same origin policy\u0022 http://en.wikipedia.org/wiki/Same_origin_policy\n             */\n            \n            var doc = null;\n            \n            // IE8 cascading access check\n            try {\n                if (frame.contentWindow) {\n                    doc = frame.contentWindow.document;\n                }\n            } catch(err) {\n                // IE8 access denied under ssl \u0026 missing protocol\n                log(\u0027cannot get iframe.contentWindow document: \u0027 + err);\n            }\n\n            if (doc) { // successful getting content\n                return doc;\n            }\n\n            try { // simply checking may throw in ie8 under ssl or mismatched protocol\n                doc = frame.contentDocument ? frame.contentDocument : frame.document;\n            } catch(err) {\n                // last attempt\n                log(\u0027cannot get iframe.contentDocument: \u0027 + err);\n                doc = frame.document;\n            }\n            return doc;\n        }\n\n        // Rails CSRF hack (thanks to Yvan Barthelemy)\n        var csrf_token = $(\u0027meta[name=csrf-token]\u0027).attr(\u0027content\u0027);\n        var csrf_param = $(\u0027meta[name=csrf-param]\u0027).attr(\u0027content\u0027);\n        if (csrf_param \u0026\u0026 csrf_token) {\n            s.extraData = s.extraData || {};\n            s.extraData[csrf_param] = csrf_token;\n        }\n\n        // take a breath so that pending repaints get some cpu time before the upload starts\n        function doSubmit() {\n            // make sure form attrs are set\n            var t = $form.attr2(\u0027target\u0027), a = $form.attr2(\u0027action\u0027);\n\n            // update form attrs in IE friendly way\n            form.setAttribute(\u0027target\u0027,id);\n            if (!method) {\n                form.setAttribute(\u0027method\u0027, \u0027POST\u0027);\n            }\n            if (a != s.url) {\n                form.setAttribute(\u0027action\u0027, s.url);\n            }\n\n            // ie borks in some cases when setting encoding\n            if (! s.skipEncodingOverride \u0026\u0026 (!method || /post/i.test(method))) {\n                $form.attr({\n                    encoding: \u0027multipart/form-data\u0027,\n                    enctype:  \u0027multipart/form-data\u0027\n                });\n            }\n\n            // support timout\n            if (s.timeout) {\n                timeoutHandle = setTimeout(function() { timedOut = true; cb(CLIENT_TIMEOUT_ABORT); }, s.timeout);\n            }\n\n            // look for server aborts\n            function checkState() {\n                try {\n                    var state = getDoc(io).readyState;\n                    log(\u0027state = \u0027 + state);\n                    if (state \u0026\u0026 state.toLowerCase() == \u0027uninitialized\u0027)\n                        setTimeout(checkState,50);\n                }\n                catch(e) {\n                    log(\u0027Server abort: \u0027 , e, \u0027 (\u0027, e.name, \u0027)\u0027);\n                    cb(SERVER_ABORT);\n                    if (timeoutHandle)\n                        clearTimeout(timeoutHandle);\n                    timeoutHandle = undefined;\n                }\n            }\n\n            // add \u0022extra\u0022 data to form if provided in options\n            var extraInputs = [];\n            try {\n                if (s.extraData) {\n                    for (var n in s.extraData) {\n                        if (s.extraData.hasOwnProperty(n)) {\n                           // if using the $.param format that allows for multiple values with the same name\n                           if($.isPlainObject(s.extraData[n]) \u0026\u0026 s.extraData[n].hasOwnProperty(\u0027name\u0027) \u0026\u0026 s.extraData[n].hasOwnProperty(\u0027value\u0027)) {\n                               extraInputs.push(\n                               $(\u0027\u003Cinput type=\u0022hidden\u0022 name=\u0022\u0027+s.extraData[n].name+\u0027\u0022\u003E\u0027).val(s.extraData[n].value)\n                                   .appendTo(form)[0]);\n                           } else {\n                               extraInputs.push(\n                               $(\u0027\u003Cinput type=\u0022hidden\u0022 name=\u0022\u0027+n+\u0027\u0022\u003E\u0027).val(s.extraData[n])\n                                   .appendTo(form)[0]);\n                           }\n                        }\n                    }\n                }\n\n                if (!s.iframeTarget) {\n                    // add iframe to doc and submit the form\n                    $io.appendTo(\u0027body\u0027);\n                    if (io.attachEvent)\n                        io.attachEvent(\u0027onload\u0027, cb);\n                    else\n                        io.addEventListener(\u0027load\u0027, cb, false);\n                }\n                setTimeout(checkState,15);\n\n                try {\n                    form.submit();\n                } catch(err) {\n                    // just in case form has element with name/id of \u0027submit\u0027\n                    var submitFn = document.createElement(\u0027form\u0027).submit;\n                    submitFn.apply(form);\n                }\n            }\n            finally {\n                // reset attrs and remove \u0022extra\u0022 input elements\n                form.setAttribute(\u0027action\u0027,a);\n                if(t) {\n                    form.setAttribute(\u0027target\u0027, t);\n                } else {\n                    $form.removeAttr(\u0027target\u0027);\n                }\n                $(extraInputs).remove();\n            }\n        }\n\n        if (s.forceSync) {\n            doSubmit();\n        }\n        else {\n            setTimeout(doSubmit, 10); // this lets dom updates render\n        }\n\n        var data, doc, domCheckCount = 50, callbackProcessed;\n\n        function cb(e) {\n            if (xhr.aborted || callbackProcessed) {\n                return;\n            }\n            \n            doc = getDoc(io);\n            if(!doc) {\n                log(\u0027cannot access response document\u0027);\n                e = SERVER_ABORT;\n            }\n            if (e === CLIENT_TIMEOUT_ABORT \u0026\u0026 xhr) {\n                xhr.abort(\u0027timeout\u0027);\n                deferred.reject(xhr, \u0027timeout\u0027);\n                return;\n            }\n            else if (e == SERVER_ABORT \u0026\u0026 xhr) {\n                xhr.abort(\u0027server abort\u0027);\n                deferred.reject(xhr, \u0027error\u0027, \u0027server abort\u0027);\n                return;\n            }\n\n            if (!doc || doc.location.href == s.iframeSrc) {\n                // response not received yet\n                if (!timedOut)\n                    return;\n            }\n            if (io.detachEvent)\n                io.detachEvent(\u0027onload\u0027, cb);\n            else\n                io.removeEventListener(\u0027load\u0027, cb, false);\n\n            var status = \u0027success\u0027, errMsg;\n            try {\n                if (timedOut) {\n                    throw \u0027timeout\u0027;\n                }\n\n                var isXml = s.dataType == \u0027xml\u0027 || doc.XMLDocument || $.isXMLDoc(doc);\n                log(\u0027isXml=\u0027+isXml);\n                if (!isXml \u0026\u0026 window.opera \u0026\u0026 (doc.body === null || !doc.body.innerHTML)) {\n                    if (--domCheckCount) {\n                        // in some browsers (Opera) the iframe DOM is not always traversable when\n                        // the onload callback fires, so we loop a bit to accommodate\n                        log(\u0027requeing onLoad callback, DOM not available\u0027);\n                        setTimeout(cb, 250);\n                        return;\n                    }\n                    // let this fall through because server response could be an empty document\n                    //log(\u0027Could not access iframe DOM after mutiple tries.\u0027);\n                    //throw \u0027DOMException: not available\u0027;\n                }\n\n                //log(\u0027response detected\u0027);\n                var docRoot = doc.body ? doc.body : doc.documentElement;\n                xhr.responseText = docRoot ? docRoot.innerHTML : null;\n                xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;\n                if (isXml)\n                    s.dataType = \u0027xml\u0027;\n                xhr.getResponseHeader = function(header){\n                    var headers = {\u0027content-type\u0027: s.dataType};\n                    return headers[header.toLowerCase()];\n                };\n                // support for XHR \u0027status\u0027 \u0026 \u0027statusText\u0027 emulation :\n                if (docRoot) {\n                    xhr.status = Number( docRoot.getAttribute(\u0027status\u0027) ) || xhr.status;\n                    xhr.statusText = docRoot.getAttribute(\u0027statusText\u0027) || xhr.statusText;\n                }\n\n                var dt = (s.dataType || \u0027\u0027).toLowerCase();\n                var scr = /(json|script|text)/.test(dt);\n                if (scr || s.textarea) {\n                    // see if user embedded response in textarea\n                    var ta = doc.getElementsByTagName(\u0027textarea\u0027)[0];\n                    if (ta) {\n                        xhr.responseText = ta.value;\n                        // support for XHR \u0027status\u0027 \u0026 \u0027statusText\u0027 emulation :\n                        xhr.status = Number( ta.getAttribute(\u0027status\u0027) ) || xhr.status;\n                        xhr.statusText = ta.getAttribute(\u0027statusText\u0027) || xhr.statusText;\n                    }\n                    else if (scr) {\n                        // account for browsers injecting pre around json response\n                        var pre = doc.getElementsByTagName(\u0027pre\u0027)[0];\n                        var b = doc.getElementsByTagName(\u0027body\u0027)[0];\n                        if (pre) {\n                            xhr.responseText = pre.textContent ? pre.textContent : pre.innerText;\n                        }\n                        else if (b) {\n                            xhr.responseText = b.textContent ? b.textContent : b.innerText;\n                        }\n                    }\n                }\n                else if (dt == \u0027xml\u0027 \u0026\u0026 !xhr.responseXML \u0026\u0026 xhr.responseText) {\n                    xhr.responseXML = toXml(xhr.responseText);\n                }\n\n                try {\n                    data = httpData(xhr, dt, s);\n                }\n                catch (err) {\n                    status = \u0027parsererror\u0027;\n                    xhr.error = errMsg = (err || status);\n                }\n            }\n            catch (err) {\n                log(\u0027error caught: \u0027,err);\n                status = \u0027error\u0027;\n                xhr.error = errMsg = (err || status);\n            }\n\n            if (xhr.aborted) {\n                log(\u0027upload aborted\u0027);\n                status = null;\n            }\n\n            if (xhr.status) { // we\u0027ve set xhr.status\n                status = (xhr.status \u003E= 200 \u0026\u0026 xhr.status \u003C 300 || xhr.status === 304) ? \u0027success\u0027 : \u0027error\u0027;\n            }\n\n            // ordering of these callbacks/triggers is odd, but that\u0027s how $.ajax does it\n            if (status === \u0027success\u0027) {\n                if (s.success)\n                    s.success.call(s.context, data, \u0027success\u0027, xhr);\n                deferred.resolve(xhr.responseText, \u0027success\u0027, xhr);\n                if (g)\n                    $.event.trigger(\u0022ajaxSuccess\u0022, [xhr, s]);\n            }\n            else if (status) {\n                if (errMsg === undefined)\n                    errMsg = xhr.statusText;\n                if (s.error)\n                    s.error.call(s.context, xhr, status, errMsg);\n                deferred.reject(xhr, \u0027error\u0027, errMsg);\n                if (g)\n                    $.event.trigger(\u0022ajaxError\u0022, [xhr, s, errMsg]);\n            }\n\n            if (g)\n                $.event.trigger(\u0022ajaxComplete\u0022, [xhr, s]);\n\n            if (g \u0026\u0026 ! --$.active) {\n                $.event.trigger(\u0022ajaxStop\u0022);\n            }\n\n            if (s.complete)\n                s.complete.call(s.context, xhr, status);\n\n            callbackProcessed = true;\n            if (s.timeout)\n                clearTimeout(timeoutHandle);\n\n            // clean up\n            setTimeout(function() {\n                if (!s.iframeTarget)\n                    $io.remove();\n                xhr.responseXML = null;\n            }, 100);\n        }\n\n        var toXml = $.parseXML || function(s, doc) { // use parseXML if available (jQuery 1.5+)\n            if (window.ActiveXObject) {\n                doc = new ActiveXObject(\u0027Microsoft.XMLDOM\u0027);\n                doc.async = \u0027false\u0027;\n                doc.loadXML(s);\n            }\n            else {\n                doc = (new DOMParser()).parseFromString(s, \u0027text/xml\u0027);\n            }\n            return (doc \u0026\u0026 doc.documentElement \u0026\u0026 doc.documentElement.nodeName != \u0027parsererror\u0027) ? doc : null;\n        };\n        var parseJSON = $.parseJSON || function(s) {\n            /*jslint evil:true */\n            return window[\u0027eval\u0027](\u0027(\u0027 + s + \u0027)\u0027);\n        };\n\n        var httpData = function( xhr, type, s ) { // mostly lifted from jq1.4.4\n\n            var ct = xhr.getResponseHeader(\u0027content-type\u0027) || \u0027\u0027,\n                xml = type === \u0027xml\u0027 || !type \u0026\u0026 ct.indexOf(\u0027xml\u0027) \u003E= 0,\n                data = xml ? xhr.responseXML : xhr.responseText;\n\n            if (xml \u0026\u0026 data.documentElement.nodeName === \u0027parsererror\u0027) {\n                if ($.error)\n                    $.error(\u0027parsererror\u0027);\n            }\n            if (s \u0026\u0026 s.dataFilter) {\n                data = s.dataFilter(data, type);\n            }\n            if (typeof data === \u0027string\u0027) {\n                if (type === \u0027json\u0027 || !type \u0026\u0026 ct.indexOf(\u0027json\u0027) \u003E= 0) {\n                    data = parseJSON(data);\n                } else if (type === \u0022script\u0022 || !type \u0026\u0026 ct.indexOf(\u0022javascript\u0022) \u003E= 0) {\n                    $.globalEval(data);\n                }\n            }\n            return data;\n        };\n\n        return deferred;\n    }\n};\n\n/**\n * ajaxForm() provides a mechanism for fully automating form submission.\n *\n * The advantages of using this method instead of ajaxSubmit() are:\n *\n * 1: This method will include coordinates for \u003Cinput type=\u0022image\u0022 /\u003E elements (if the element\n *    is used to submit the form).\n * 2. This method will include the submit element\u0027s name/value data (for the element that was\n *    used to submit the form).\n * 3. This method binds the submit() method to the form for you.\n *\n * The options argument for ajaxForm works exactly as it does for ajaxSubmit.  ajaxForm merely\n * passes the options argument along after properly binding events for submit elements and\n * the form itself.\n */\n$.fn.ajaxForm = function(options) {\n    options = options || {};\n    options.delegation = options.delegation \u0026\u0026 $.isFunction($.fn.on);\n\n    // in jQuery 1.3+ we can fix mistakes with the ready state\n    if (!options.delegation \u0026\u0026 this.length === 0) {\n        var o = { s: this.selector, c: this.context };\n        if (!$.isReady \u0026\u0026 o.s) {\n            log(\u0027DOM not ready, queuing ajaxForm\u0027);\n            $(function() {\n                $(o.s,o.c).ajaxForm(options);\n            });\n            return this;\n        }\n        // is your DOM ready?  http://docs.jquery.com/Tutorials:Introducing_$(document).ready()\n        log(\u0027terminating; zero elements found by selector\u0027 + ($.isReady ? \u0027\u0027 : \u0027 (DOM not ready)\u0027));\n        return this;\n    }\n\n    if ( options.delegation ) {\n        $(document)\n            .off(\u0027submit.form-plugin\u0027, this.selector, doAjaxSubmit)\n            .off(\u0027click.form-plugin\u0027, this.selector, captureSubmittingElement)\n            .on(\u0027submit.form-plugin\u0027, this.selector, options, doAjaxSubmit)\n            .on(\u0027click.form-plugin\u0027, this.selector, options, captureSubmittingElement);\n        return this;\n    }\n\n    return this.ajaxFormUnbind()\n        .bind(\u0027submit.form-plugin\u0027, options, doAjaxSubmit)\n        .bind(\u0027click.form-plugin\u0027, options, captureSubmittingElement);\n};\n\n// private event handlers\nfunction doAjaxSubmit(e) {\n    /*jshint validthis:true */\n    var options = e.data;\n    if (!e.isDefaultPrevented()) { // if event has been canceled, don\u0027t proceed\n        e.preventDefault();\n        $(this).ajaxSubmit(options);\n    }\n}\n\nfunction captureSubmittingElement(e) {\n    /*jshint validthis:true */\n    var target = e.target;\n    var $el = $(target);\n    if (!($el.is(\u0022[type=submit],[type=image]\u0022))) {\n        // is this a child element of the submit el?  (ex: a span within a button)\n        var t = $el.closest(\u0027[type=submit]\u0027);\n        if (t.length === 0) {\n            return;\n        }\n        target = t[0];\n    }\n    var form = this;\n    form.clk = target;\n    if (target.type == \u0027image\u0027) {\n        if (e.offsetX !== undefined) {\n            form.clk_x = e.offsetX;\n            form.clk_y = e.offsetY;\n        } else if (typeof $.fn.offset == \u0027function\u0027) {\n            var offset = $el.offset();\n            form.clk_x = e.pageX - offset.left;\n            form.clk_y = e.pageY - offset.top;\n        } else {\n            form.clk_x = e.pageX - target.offsetLeft;\n            form.clk_y = e.pageY - target.offsetTop;\n        }\n    }\n    // clear form vars\n    setTimeout(function() { form.clk = form.clk_x = form.clk_y = null; }, 100);\n}\n\n\n// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm\n$.fn.ajaxFormUnbind = function() {\n    return this.unbind(\u0027submit.form-plugin click.form-plugin\u0027);\n};\n\n/**\n * formToArray() gathers form element data into an array of objects that can\n * be passed to any of the following ajax functions: $.get, $.post, or load.\n * Each object in the array has both a \u0027name\u0027 and \u0027value\u0027 property.  An example of\n * an array for a simple login form might be:\n *\n * [ { name: \u0027username\u0027, value: \u0027jresig\u0027 }, { name: \u0027password\u0027, value: \u0027secret\u0027 } ]\n *\n * It is this array that is passed to pre-submit callback functions provided to the\n * ajaxSubmit() and ajaxForm() methods.\n */\n$.fn.formToArray = function(semantic, elements) {\n    var a = [];\n    if (this.length === 0) {\n        return a;\n    }\n\n    var form = this[0];\n    var els = semantic ? form.getElementsByTagName(\u0027*\u0027) : form.elements;\n    if (!els) {\n        return a;\n    }\n\n    var i,j,n,v,el,max,jmax;\n    for(i=0, max=els.length; i \u003C max; i++) {\n        el = els[i];\n        n = el.name;\n        if (!n || el.disabled) {\n            continue;\n        }\n\n        if (semantic \u0026\u0026 form.clk \u0026\u0026 el.type == \u0022image\u0022) {\n            // handle image inputs on the fly when semantic == true\n            if(form.clk == el) {\n                a.push({name: n, value: $(el).val(), type: el.type });\n                a.push({name: n+\u0027.x\u0027, value: form.clk_x}, {name: n+\u0027.y\u0027, value: form.clk_y});\n            }\n            continue;\n        }\n\n        v = $.fieldValue(el, true);\n        if (v \u0026\u0026 v.constructor == Array) {\n            if (elements)\n                elements.push(el);\n            for(j=0, jmax=v.length; j \u003C jmax; j++) {\n                a.push({name: n, value: v[j]});\n            }\n        }\n        else if (feature.fileapi \u0026\u0026 el.type == \u0027file\u0027) {\n            if (elements)\n                elements.push(el);\n            var files = el.files;\n            if (files.length) {\n                for (j=0; j \u003C files.length; j++) {\n                    a.push({name: n, value: files[j], type: el.type});\n                }\n            }\n            else {\n                // #180\n                a.push({ name: n, value: \u0027\u0027, type: el.type });\n            }\n        }\n        else if (v !== null \u0026\u0026 typeof v != \u0027undefined\u0027) {\n            if (elements)\n                elements.push(el);\n            a.push({name: n, value: v, type: el.type, required: el.required});\n        }\n    }\n\n    if (!semantic \u0026\u0026 form.clk) {\n        // input type==\u0027image\u0027 are not found in elements array! handle it here\n        var $input = $(form.clk), input = $input[0];\n        n = input.name;\n        if (n \u0026\u0026 !input.disabled \u0026\u0026 input.type == \u0027image\u0027) {\n            a.push({name: n, value: $input.val()});\n            a.push({name: n+\u0027.x\u0027, value: form.clk_x}, {name: n+\u0027.y\u0027, value: form.clk_y});\n        }\n    }\n    return a;\n};\n\n/**\n * Serializes form data into a \u0027submittable\u0027 string. This method will return a string\n * in the format: name1=value1\u0026amp;name2=value2\n */\n$.fn.formSerialize = function(semantic) {\n    //hand off to jQuery.param for proper encoding\n    return $.param(this.formToArray(semantic));\n};\n\n/**\n * Serializes all field elements in the jQuery object into a query string.\n * This method will return a string in the format: name1=value1\u0026amp;name2=value2\n */\n$.fn.fieldSerialize = function(successful) {\n    var a = [];\n    this.each(function() {\n        var n = this.name;\n        if (!n) {\n            return;\n        }\n        var v = $.fieldValue(this, successful);\n        if (v \u0026\u0026 v.constructor == Array) {\n            for (var i=0,max=v.length; i \u003C max; i++) {\n                a.push({name: n, value: v[i]});\n            }\n        }\n        else if (v !== null \u0026\u0026 typeof v != \u0027undefined\u0027) {\n            a.push({name: this.name, value: v});\n        }\n    });\n    //hand off to jQuery.param for proper encoding\n    return $.param(a);\n};\n\n/**\n * Returns the value(s) of the element in the matched set.  For example, consider the following form:\n *\n *  \u003Cform\u003E\u003Cfieldset\u003E\n *      \u003Cinput name=\u0022A\u0022 type=\u0022text\u0022 /\u003E\n *      \u003Cinput name=\u0022A\u0022 type=\u0022text\u0022 /\u003E\n *      \u003Cinput name=\u0022B\u0022 type=\u0022checkbox\u0022 value=\u0022B1\u0022 /\u003E\n *      \u003Cinput name=\u0022B\u0022 type=\u0022checkbox\u0022 value=\u0022B2\u0022/\u003E\n *      \u003Cinput name=\u0022C\u0022 type=\u0022radio\u0022 value=\u0022C1\u0022 /\u003E\n *      \u003Cinput name=\u0022C\u0022 type=\u0022radio\u0022 value=\u0022C2\u0022 /\u003E\n *  \u003C/fieldset\u003E\u003C/form\u003E\n *\n *  var v = $(\u0027input[type=text]\u0027).fieldValue();\n *  // if no values are entered into the text inputs\n *  v == [\u0027\u0027,\u0027\u0027]\n *  // if values entered into the text inputs are \u0027foo\u0027 and \u0027bar\u0027\n *  v == [\u0027foo\u0027,\u0027bar\u0027]\n *\n *  var v = $(\u0027input[type=checkbox]\u0027).fieldValue();\n *  // if neither checkbox is checked\n *  v === undefined\n *  // if both checkboxes are checked\n *  v == [\u0027B1\u0027, \u0027B2\u0027]\n *\n *  var v = $(\u0027input[type=radio]\u0027).fieldValue();\n *  // if neither radio is checked\n *  v === undefined\n *  // if first radio is checked\n *  v == [\u0027C1\u0027]\n *\n * The successful argument controls whether or not the field element must be \u0027successful\u0027\n * (per http://www.w3.org/TR/html4/interact/forms.html#successful-controls).\n * The default value of the successful argument is true.  If this value is false the value(s)\n * for each element is returned.\n *\n * Note: This method *always* returns an array.  If no valid value can be determined the\n *    array will be empty, otherwise it will contain one or more values.\n */\n$.fn.fieldValue = function(successful) {\n    for (var val=[], i=0, max=this.length; i \u003C max; i++) {\n        var el = this[i];\n        var v = $.fieldValue(el, successful);\n        if (v === null || typeof v == \u0027undefined\u0027 || (v.constructor == Array \u0026\u0026 !v.length)) {\n            continue;\n        }\n        if (v.constructor == Array)\n            $.merge(val, v);\n        else\n            val.push(v);\n    }\n    return val;\n};\n\n/**\n * Returns the value of the field element.\n */\n$.fieldValue = function(el, successful) {\n    var n = el.name, t = el.type, tag = el.tagName.toLowerCase();\n    if (successful === undefined) {\n        successful = true;\n    }\n\n    if (successful \u0026\u0026 (!n || el.disabled || t == \u0027reset\u0027 || t == \u0027button\u0027 ||\n        (t == \u0027checkbox\u0027 || t == \u0027radio\u0027) \u0026\u0026 !el.checked ||\n        (t == \u0027submit\u0027 || t == \u0027image\u0027) \u0026\u0026 el.form \u0026\u0026 el.form.clk != el ||\n        tag == \u0027select\u0027 \u0026\u0026 el.selectedIndex == -1)) {\n            return null;\n    }\n\n    if (tag == \u0027select\u0027) {\n        var index = el.selectedIndex;\n        if (index \u003C 0) {\n            return null;\n        }\n        var a = [], ops = el.options;\n        var one = (t == \u0027select-one\u0027);\n        var max = (one ? index+1 : ops.length);\n        for(var i=(one ? index : 0); i \u003C max; i++) {\n            var op = ops[i];\n            if (op.selected) {\n                var v = op.value;\n                if (!v) { // extra pain for IE...\n                    v = (op.attributes \u0026\u0026 op.attributes[\u0027value\u0027] \u0026\u0026 !(op.attributes[\u0027value\u0027].specified)) ? op.text : op.value;\n                }\n                if (one) {\n                    return v;\n                }\n                a.push(v);\n            }\n        }\n        return a;\n    }\n    return $(el).val();\n};\n\n/**\n * Clears the form data.  Takes the following actions on the form\u0027s input fields:\n *  - input text fields will have their \u0027value\u0027 property set to the empty string\n *  - select elements will have their \u0027selectedIndex\u0027 property set to -1\n *  - checkbox and radio inputs will have their \u0027checked\u0027 property set to false\n *  - inputs of type submit, button, reset, and hidden will *not* be effected\n *  - button elements will *not* be effected\n */\n$.fn.clearForm = function(includeHidden) {\n    return this.each(function() {\n        $(\u0027input,select,textarea\u0027, this).clearFields(includeHidden);\n    });\n};\n\n/**\n * Clears the selected form elements.\n */\n$.fn.clearFields = $.fn.clearInputs = function(includeHidden) {\n    var re = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i; // \u0027hidden\u0027 is not in this list\n    return this.each(function() {\n        var t = this.type, tag = this.tagName.toLowerCase();\n        if (re.test(t) || tag == \u0027textarea\u0027) {\n            this.value = \u0027\u0027;\n        }\n        else if (t == \u0027checkbox\u0027 || t == \u0027radio\u0027) {\n            this.checked = false;\n        }\n        else if (tag == \u0027select\u0027) {\n            this.selectedIndex = -1;\n        }\n    \telse if (t == \u0022file\u0022) {\n\t\t\tif (/MSIE/.test(navigator.userAgent)) {\n\t\t\t\t$(this).replaceWith($(this).clone(true));\n\t\t\t} else {\n\t\t\t\t$(this).val(\u0027\u0027);\n\t\t\t}\n\t\t}\n        else if (includeHidden) {\n            // includeHidden can be the value true, or it can be a selector string\n            // indicating a special test; for example:\n            //  $(\u0027#myForm\u0027).clearForm(\u0027.special:hidden\u0027)\n            // the above would clean hidden inputs that have the class of \u0027special\u0027\n            if ( (includeHidden === true \u0026\u0026 /hidden/.test(t)) ||\n                 (typeof includeHidden == \u0027string\u0027 \u0026\u0026 $(this).is(includeHidden)) )\n                this.value = \u0027\u0027;\n        }\n    });\n};\n\n/**\n * Resets the form data.  Causes all form elements to be reset to their original value.\n */\n$.fn.resetForm = function() {\n    return this.each(function() {\n        // guard against an input with the name of \u0027reset\u0027\n        // note that IE reports the reset function as an \u0027object\u0027\n        if (typeof this.reset == \u0027function\u0027 || (typeof this.reset == \u0027object\u0027 \u0026\u0026 !this.reset.nodeType)) {\n            this.reset();\n        }\n    });\n};\n\n/**\n * Enables or disables any matching elements.\n */\n$.fn.enable = function(b) {\n    if (b === undefined) {\n        b = true;\n    }\n    return this.each(function() {\n        this.disabled = !b;\n    });\n};\n\n/**\n * Checks/unchecks any matching checkboxes or radio buttons and\n * selects/deselects and matching option elements.\n */\n$.fn.selected = function(select) {\n    if (select === undefined) {\n        select = true;\n    }\n    return this.each(function() {\n        var t = this.type;\n        if (t == \u0027checkbox\u0027 || t == \u0027radio\u0027) {\n            this.checked = select;\n        }\n        else if (this.tagName.toLowerCase() == \u0027option\u0027) {\n            var $sel = $(this).parent(\u0027select\u0027);\n            if (select \u0026\u0026 $sel[0] \u0026\u0026 $sel[0].type == \u0027select-one\u0027) {\n                // deselect all other options\n                $sel.find(\u0027option\u0027).selected(false);\n            }\n            this.selected = select;\n        }\n    });\n};\n\n// expose debug var\n$.fn.ajaxSubmit.debug = false;\n\n// helper fn for console logging\nfunction log() {\n    if (!$.fn.ajaxSubmit.debug)\n        return;\n    var msg = \u0027[jquery.form] \u0027 + Array.prototype.join.call(arguments,\u0027\u0027);\n    if (window.console \u0026\u0026 window.console.log) {\n        window.console.log(msg);\n    }\n    else if (window.opera \u0026\u0026 window.opera.postError) {\n        window.opera.postError(msg);\n    }\n}\n\n})( (typeof(jQuery) != \u0027undefined\u0027) ? jQuery : window.Zepto ); ","type":"Resource"},{"name":"resourceType","value":"Javascript","type":"Label"}]},{"id":"e90df2d5-d5a3-a0d8-6796-b2b41dd7cd8c","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":"validateKeyJS"},{"name":"resourceCode","type":"Resource","value":"$(document).ready(function() {\r\n  var urlApi = Dashboards.getWebAppPath() + \u0027/plugin/fusion_plugin/api/verifyKey\u0027;\r\n  var fusionkey = $.ajax({type: \u0027GET\u0027, url: urlApi, async: false, error: function(xhr, textStatus, error){console.log(\u0022Error while validating your key. Make sure your key is valid\u0022)}}).responseText;\r\n  // error validating key\r\n  console.log(fusionkey)\r\n  if(fusionkey.match(\u0022\u003Chtml \u003E\u0022)){\r\n    $(\u0027#installXT\u0027).hide();\r\n    $(\u0022#alertDiv\u0022).append(\u0022\u003Cdiv class=\\\u0022alert alert-danger\\\u0022\u003E\u003Cstrong\u003EError!\u003C/strong\u003E Make sure your key is valid\u003C/div\u003E\u0022);\r\n    return;\r\n    }\r\n  \r\n  fusionkey = fusionkey.split(\u0022-\u0022, 2);\r\n  //success validation key\r\n  if(fusionkey[0] == (\u0022 \u0022) \u0026\u0026 (fusionkey[1].match(\u0022true\u0022) || fusionkey[1].match(\u0022false\u0022))){\r\n      $(\u0027#installXT\u0027).show();\r\n      $(\u0022#alertDiv\u0022).append(\u0022\u003Cdiv class=\\\u0022alert success\\\u0022\u003E\u003Cstrong\u003ESuccess!\u003C/strong\u003E You have a valid key\u003C/div\u003E\u0022);\r\n      \r\n      $(\u0022#installXT\u0022).append(  \r\n        \u0022\u003Cdiv id=\\\u0022uploaderObj\\\u0022 class=\\\u0022fileUploaderComponent\\\u0022\u003E\u0022+\r\n          \u0022\u003Cdiv class=\\\u0022fileSelect\\\u0022\u003E\u0022+\r\n              \u0022\u003Cdiv class=\\\u0022uploadButton zeroHeight\\\u0022\u003E\u0022+\r\n                  \u0022\u003Cform id=\\\u0022uploadForm\\\u0022 action=\\\u0022http://localhost:8080/pentaho/plugin/fusion_plugin/api/\\\u0022 method=\\\u0022post\\\u0022 enctype=\\\u0022multipart/form-data\\\u0022\u003E\u0022+\r\n                      \u0022\u003Cdiv id=\\\u0022fakeButton\\\u0022\u003E\u003Clabel id=\\\u0022select\\\u0022\u003ESelect File\u003Cinput type=\\\u0022file\\\u0022 class=\\\u0022file\\\u0022 name=\\\u0022file\\\u0022 id=\\\u0022uploaderObj_file\\\u0022 style=\\\u0022position: absolute; left: -9999em;\\\u0022\u003E\u003C/div\u003E\u0022+\r\n                          \u0022\u003Cinput type=\\\u0022text\\\u0022 id=\\\u0022mytext\\\u0022\u003E\u0022+\r\n                          \u0022\u003Cinput type=\\\u0022hidden\\\u0022 name=\\\u0022path\\\u0022 value=\\\u0022.\\\u0022 class=\\\u0022hide\\\u0022\u003E\u0022+\r\n                          \u0022\u003Cbutton id=\\\u0022uploadInstBtn\\\u0022 type=\\\u0022submit\\\u0022 class=\\\u0022submitBtn\\\u0022 onclick=\\\u0022javascript:uploadFileRequest();\\\u0022\u003EUpload and Install Fusion XT\u003C/button\u003E\u0022+\r\n                          \u0022\u003C/form\u003E\u0022+\r\n              \u0022\u003C/div\u003E\u0022+\r\n          \u0022\u003C/div\u003E\u0022+\r\n        \u0022\u003C/div\u003E\u0022\r\n    );\r\n  }\r\n  else if(fusionkey[0].match(\u0022Error\u0022)){\r\n    fusionkey = fusionkey[0].replace(\u0022Error:\u0022,\u0022 \u0022);\r\n    $(\u0022#alertDiv\u0022).append(\r\n      \u0022\u003Cdiv class=\\\u0022alert alert-danger\\\u0022\u003E\u0022+\r\n        \u0022\u003Cstrong\u003EError!\u003C/strong\u003E\u0022+fusionkey+\r\n      \u0022\u003C/div\u003E\u0022\r\n    );\r\n  }else{\r\n    if(fusionkey[0].match(\u0022Warning\u0022)){\r\n        fusionkey = fusionkey[0].replace(\u0022Warning:\u0022,\u0022 \u0022);\r\n        $(\u0022#alertDiv\u0022).append(\r\n            \u0022\u003Cdiv class=\\\u0022alert alert-warning\\\u0022\u003E\u0022+\r\n            \u0022\u003Cstrong\u003EWarning!\u003C/strong\u003E\u0022+fusionkey+\r\n            \u0022\u003C/div\u003E\u0022\r\n        );\r\n    }\r\n  }\r\n});  "},{"name":"resourceType","type":"Label","value":"Javascript"}],"type":"LayoutResourceCode","typeDesc":"Resource"},{"id":"5b5041a3-df29-2bac-094d-191ae7bbbb41","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":"xtInstallJS"},{"name":"resourceCode","type":"Resource","value":"\nfunction uploadFileRequest(){\n    var $uploadAlerts = $(\u0027\u003Cdiv class=\u0022hide\u0022 \u003E\u003C/div\u003E\u0027);\n    $(\u0027#uploaderObj\u0027).append($uploadAlerts);\n    var url = Dashboards.getWebAppPath() + \u0027/plugin/fusion_plugin/api/uploadFile\u0027;\n    //var theForm=document.getElementById(\u0022uploadForm\u0022);\n    //theForm.action = url;\n    //theForm.submit();\n    \n    $(\u0027#uploadForm\u0027)\n    .ajaxForm({\n        url : url,\n        dataType : \u0027json\u0027,\n        success : function (response) {\n            $(\u0022.alert\u0022).not(\u0027#alertDiv .alert\u0027).remove();\n            if(response.result){\n             $uploadAlerts.attr(\u0027class\u0027, \u0027alert success\u0027).text(response.message);\n             installXT();\n            }else{\n                $uploadAlerts.attr(\u0027class\u0027, \u0027alert error\u0027).text(response.message);\n            }\n        },\n        error: function (response) {\n            $uploadAlerts.attr(\u0027class\u0027, \u0027alert error\u0027).text(\u0027Error uploading file\u0027 +\n        (typeof response.message === \u0022string\u0022 ? \u0022 - \u0022 + response.message : \u0022\u0022));\n        },\n    })\n;\n}\n\nfunction installXT(){\n     var successCallback = function (json)\n        { \n          $(\u0022.alert\u0022).not(\u0027#alertDiv .alert\u0027).text(\u0022Files extracted... finalizing installation\u0022);    \n          Dashboards.decrementRunningCalls();\n          configureFile();\n        }\n        \n        var errorCallback = function (json){\n            alert(\u0027Something went wrong. Please try again later.\u0027);\n            Dashboards.decrementRunningCalls();\n        }\n    \n    \n        Dashboards.incrementRunningCalls();   \n        sparkl.runEndpoint( \u0027fusion_plugin\u0027 , \u0027installXTJob\u0027, {\n            success: successCallback,\n            error: errorCallback\n        });\n}\n\nfunction configureFile(){\n     var successCallback = function (json)\n        { \n          $(\u0022.alert\u0022).not(\u0027#alertDiv .alert\u0027).text(\u0022Installation Finished... Please clear your browser\u0027s cache!\u0022);    \n          Dashboards.decrementRunningCalls();\n        }\n        \n        var errorCallback = function (json){\n            if(json.statusText==\u0022OK\u0022){\n                $(\u0022.alert\u0022).not(\u0027#alertDiv .alert\u0027).text(\u0022Installation Finished... Please clear your browser\u0027s cache!\u0022);\n            }\n            Dashboards.decrementRunningCalls();\n        }\n    \n    \n        Dashboards.incrementRunningCalls();   \n        sparkl.runEndpoint( \u0027fusion_plugin\u0027 , \u0027configureproperties\u0027, {\n            success: successCallback,\n            error: errorCallback\n        });\n}\n "},{"name":"resourceType","type":"Label","value":"Javascript"}],"type":"LayoutResourceCode","typeDesc":"Resource"},{"id":"da2390ce-3ce0-5940-a239-5f7b77d6dcb5","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":"ManagerJS"},{"name":"resourceCode","type":"Resource","value":"function f(){\n        \n    var keyvalue = Dashboards.getParameterValue(\u0027${p:keyValue}\u0027),\n        endpoint = \u0027updateKeyJob\u0027;\n    \n    keyvalue = keyvalue.trim();\n    \n    if(keyvalue !== \u0027\u0027 \u0026\u0026 keyvalue !== \u0027Insert new key here...\u0027)\n    {        \n        var successCallback = function (json)\n        {      \n          $(\u0027textarea\u0027).val(\u0022\u0022);\n          Dashboards.setParameter(\u0027${p:keyValue}\u0027,\u0027\u0027);\n          Dashboards.decrementRunningCalls();\n          location.reload();\n        }\n        \n        var errorCallback = function (json){\n            alert(\u0027Something went wrong. Please try again later.\u0027);\n            Dashboards.decrementRunningCalls();\n        }\n    \n    \n        Dashboards.incrementRunningCalls();   \n        sparkl.runEndpoint( \u0027fusion_plugin\u0027 , endpoint, {\n            params: { \n                key: keyvalue,\n                key_filename: \u0027../../key\u0027\n            },\n            success: successCallback,\n            error: errorCallback\n        });\n    }\n    else{\n        return false;\n    }\n} \n "},{"name":"resourceType","type":"Label","value":"Javascript"}],"type":"LayoutResourceCode","typeDesc":"Resource"},{"id":"d86c0274-564c-c77b-caaa-28089b8a4073","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":"Sparkl"},{"name":"resourceCode","type":"Resource","value":"/********************************** Project namespace *******************************************/\nvar sparkl = {};\n(function(myself){\n\n  _settings = {\n    expressions: {\n      element: /^[A-Za-z][A-Za-z\\d]*$/,\n      plugin: /^[A-Za-z][A-Za-z\\d]*$/, \n      image: /\\.(png|jpg)$/,\n      zip: /\\.(zip)$/\n    },\n    reservedNames: [\n      \u0027status\u0027, \u0027refresh\u0027, \u0027reload\u0027\n    ]\n  };\n\n  myself.getSettings = function (){\n    var acc = _settings;\n    _.every( arguments, function(el){\n      acc = acc[el] || undefined;\n      return !!acc\n    });\n    return acc;\n  }\n  \n\n  myself.changeLocation = function (newLocation, bookmarks, isNew){\n  if(!newLocation){ return; }\n    var hash = (bookmarks \u0026\u0026 !_.isEmpty(bookmarks) ) ? \u0027#\u0027 + generateHashValue( \u0022bookmark\u0022 , { impl: \u0022client\u0022 , params: bookmarks } ) : \u0022\u0022;\n    if (isNew){\n      window.open( newLocation + hash);\n      } else {\n        window.location = newLocation + hash;\n    }\n  }\n\n  function generateHashValue (key, value) {\n    var obj = Dashboards.getHashValue(),json;\n    if (arguments.length == 1) {\n      obj = key;\n    } else {\n      obj[key] = value;\n    }\n    json = JSON.stringify(obj);\n    return json;\n  }\n\n  myself.isValidName = function (name, type){\n    var reg = _settings.expressions[ type || \u0027plugin\u0027 ] || /.*/;\n    return reg.test(name);\n  }  \n\n\n  myself.isUpdated = function ( srcVersion , pluginVersion ){\n    return ( srcVersion == pluginVersion );\n  }\n\n\n  myself.isJobError = function(json){\n    return (json \u0026\u0026 json.result === false );\n  }   \n\n  myself.hasUploaderComponent = function (){\n    return !(typeof FileUploaderComponent == \u0027undefined\u0027)\n  }\n\n\n  myself.createElementsTableEmptyRawData = function() {\n    var emptyData = {\n      metadata:[\n        {\n          colIndex: 0,\n          colType: \u0027String\u0027,\n          colName: \u0027elementName\u0027\n        },\n        {\n          colIndex: 1,\n          colType: \u0027String\u0027,\n          colName: \u0027elementType\u0027\n        },\n        {\n          colIndex: 2,\n          colType: \u0027Boolean\u0027,\n          colName: \u0027adminOnly\u0027\n        },\n        {\n          colIndex: 3,\n          colType: \u0027String\u0027,\n          colName: \u0027fileName\u0027\n        },\n        {\n          colIndex: 4,\n          colType: \u0027String\u0027,\n          colName: \u0027elementName\u0027\n        }\n      ],\n      queryInfo:{\n        totalRows: 0\n      },\n      resultset: []\n    }\n    return emptyData;\n  }  \n\n\nmyself.addUploadForm = function(ph, opts){\n    var _myself = myself;\n\n    var _opts = {\n      root:\u0027.\u0027,\n      success: function (filename) {\n        Dashboards.log(\u0027File uploaded\u0027);\n      },\n      uploadError: function () {\n        Dashboards.log(\u0027Error uploading file\u0027);\n      },\n      validationError: function () {\n        Dashboards.log(\u0027File type not allowed.\u0027);\n      },\n      isValidFilename: function(filename){\n        var reg = _myself.getSettings(\u0027expressions\u0027,\u0027image\u0027);\n        return reg.test(filename);\n      }\n    }\n\n    opts = _.extend({}, _opts, opts);\n\n    var $ph = $(ph)\n        myself = this,\n        $uploadForm = $(\u0027\u003Cform action=\u0022../cfr/store\u0022 method=\u0022post\u0022 enctype=\u0022multipart/form-data\u0022\u003E\u0027).addClass(\u0027WDhidden\u0027),\n        filename = \u0027\u0027;\n\n    var validateForm = function (){\n      if ( opts.isValidFilename(filename) ){\n        return true\n      } else {\n        opts.validationError();\n        return false\n      }\n    }\n\n    var resetUploadForm = function () {\n      $fileInput.val(\u0027\u0027);\n      filename = \u0027\u0027;\n    };\n\n    var fileUploaded = function (response) {\n      if (response.result) {\n        opts.success(filename);\n        resetUploadForm(filename);\n      } else {\n        opts.uploadError(filename);\n      }\n    };\n\n    // configure file upload form\n    $uploadForm.ajaxForm({\n      dataType: \u0027json\u0027,\n      success: fileUploaded,\n      error: opts.uploadError,\n      beforeSubmit: validateForm\n    });\n\n    $ph.append($uploadForm);\n\n    var $fileInput = $(\u0027\u003Cinput type=\u0022file\u0022 class=\u0022file\u0022 name=\u0022file\u0022 required/\u003E\u0027).appendTo($uploadForm),\n        $pathInput = $(\u0027\u003Cinput type=\u0022hidden\u0022 name=\u0022path\u0022 value=\u0022\u0027 + opts.root + \u0027\u0022/\u003E\u0027).appendTo($uploadForm),\n        $submitInput = $(\u0027\u003Cbutton type=\u0022submit\u0022\u003E\u0027).appendTo($uploadForm);\n\n    $fileInput.attr(\u0022id\u0022, this.htmlObject + \u0022_file\u0022);\n    $fileInput.change(function () {\n      if ($fileInput.val() !== \u0022\u0022) {\n        filename = $fileInput.val();\n        if (filename.slice(3, 11) == \u0022fakepath\u0022) {\n          filename = filename.slice(12, filename.length);\n        }\n        $submitInput.click();\n      }\n    });\n\n    return function (){\n      $fileInput.click();\n    }\n  }\n\n\n  myself.testFile = function (url, successCallback, errorCallback){\n    successCallback = successCallback || function (){ return true };\n    errorCallback = errorCallback || function(){ return true }\n    $.ajax({\n      url: url,\n      type:\u0027HEAD\u0027,\n      error: errorCallback,\n      success: successCallback\n    });\n  }\n\n\n\n  myself.runEndpoint = function ( pluginId, endpoint, opts){\n\n    if ( !pluginId \u0026\u0026 !endpoint){\n      Dashboards.log(\u0027PluginId or endpointName not defined.\u0027);\n      return false\n    }\n\n    var _opts = {\n      success: function (){\n        Dashboards.log( pluginId + \u0027: \u0027 + endpoint + \u0027 ran successfully.\u0027)\n      },\n      error: function (){\n        Dashboards.log( pluginId + \u0027: error running \u0027 + endpoint + \u0027.\u0027)\n      },\n      params: {},\n      systemParams: {},\n      type: \u0027POST\u0027,\n      dataType: \u0027json\u0027\n    }\n    var opts = $.extend( {}, _opts, opts);\n    var url = Dashboards.getWebAppPath() + \u0027/plugin/\u0027 + pluginId + \u0027/api/\u0027 + endpoint;\n\n    function successHandler  (json){\n      if ( json \u0026\u0026 json.result == false){\n        opts.error.apply(this, arguments);\n      } else {\n        opts.success.apply( this, arguments );\n      }\n    }\n\n    function errorHandler  (){\n      opts.error.apply(this, arguments);\n    }\n    if ( endpoint != \u0027renderer/refresh\u0027 ) { //XXX - do this better\n      var ajaxOpts = {\n        url: url,\n        async: true,\n        type: opts.type,\n        dataType: opts.dataType,\n        success: successHandler,\n        error: errorHandler,\n        data: {}\n      }\n    } else {\n      var ajaxOpts = {\n        url: url,\n        async: true,\n        type: \u0027GET\u0027,\n        dataType: opts.dataType,\n        success: successHandler,\n        error: errorHandler,\n        data: {}\n      }\n    }\n\n    _.each( opts.params , function ( value , key){\n      ajaxOpts.data[\u0027param\u0027 + key] = value;\n    });\n    _.each( opts.systemParams , function ( value , key){\n      ajaxOpts.data[key] = value;\n    });\n\n    $.ajax(ajaxOpts)\n  }\n\n  myself.getEndpointCaller = function( pluginId, endpoint, opts ){\n    var myself = this;\n    return function (callback, errorCallback, params){\n      var _opts = $.extend({}, opts);\n      _opts.params = params || _opts.params;\n      _opts.success = callback || _opts.success;\n      _opts.error = errorCallback || _opts.error;\n      myself.runEndpoint(pluginId, endpoint, _opts);\n    }\n  };\n\n  myself.publishToServer = function (callback){\n    $.ajax({\n      url: Dashboards.getWebAppPath() + \u0027/plugin/sparkl/api/reloadPlugins\u0027,\n      type:\u0027POST\u0027,\n      data: {\n        \u0027publish\u0027: \u0027now\u0027,\n        \u0027class\u0027: \u0027org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter\u0027\n      },                \n      success: callback\n    });\n  }\n\n  myself.addCallWrapper = function ( caller , callback){\n    return function (json) { \n      caller( callback ); \n    };\n  };\n  myself.addRefreshWrapper = function (pluginId, callback){\n    if( pluginId != \u0027pentaho-cdf-dd\u0027 ) {//XXX - do this better\n     var caller = this.getEndpointCaller( pluginId, \u0027refresh\u0027 , { dataType:\u0027text\u0027});\n  } else {\n     var caller = this.getEndpointCaller( pluginId, \u0027renderer/refresh\u0027 , { dataType:\u0027text\u0027});\n  }\n    return this.addCallWrapper( caller, callback );\n  }\n  myself.addPublishWrapper = function (callback){\n    // HACK: This call is only here because cpk is acting weird after a publish. Remove when bug \n    // on cpk is found!!!\n    var cb = function (){\n      $.ajax({\n        url: Dashboards.getWebAppPath() + \u0027/plugin/sparkl/api/getpluginmetadata\u0027,\n        type: \u0027GET\u0027,\n        async: true,\n        success: callback,\n        error: callback\n      });\n    };\n    return this.addCallWrapper( this.publishToServer, cb );\n  };\n\n\n\n\n\n})(sparkl);\n\n/************************************  AddIns ************************************/\n\n\n;(function (){\n\n  var actionButtonsOpts = {\n    name: \u0022actionButtons\u0022,\n    label: \u0022Action Buttons\u0022,\n    defaults: {\n      buttons:[\n        {\n          cssClass: \u0022viewButton\u0022,\n          title: \u0022View\u0022,\n          tooltip: \u0022View\u0022,\n            action: function(v, st) {\n              Dashboards.log(v);\n            }\n        }\n      ]\n    },\n\n    init: function(){\n        $.fn.dataTableExt.oSort[this.name+\u0027-asc\u0027] = $.fn.dataTableExt.oSort[\u0027string-asc\u0027];\n        $.fn.dataTableExt.oSort[this.name+\u0027-desc\u0027] = $.fn.dataTableExt.oSort[\u0027string-desc\u0027];\n    },\n    \n    implementation: function(tgt, st, opt){\n      var $buttonContainer = $(\u0027\u003Cdiv/\u003E\u0027).addClass(\u0027buttonContainer\u0027)\n        .addClass(\u0027numButtons-\u0027 + opt.buttons.length);\n      _.each(opt.buttons, function(el,idx){\n        var $button = $(\u0022\u003Cbutton/\u003E\u0022).addClass(el.cssClass||\u0022\u0022).text(el.title||\u0022\u0022).attr(\u0027title\u0027, el.tooltip||\u0022\u0022);\n        $button.click(function(){\n          if (el.action) {\n            el.action(st.value, st);\n          }\n        });\n        $buttonContainer.append($button);\n      });\n      $(tgt).empty().append($buttonContainer);\n\n    }\n\n    };\n    Dashboards.registerAddIn(\u0022Table\u0022, \u0022colType\u0022, new AddIn(actionButtonsOpts));\n  \n  \n/* edit data of table  */\n  var editable = {\n  name: \u0022editable\u0022,\n  label: \u0022Editable\u0022,\n  defaults: {\n    action: function (v, st) {\n      Dashboards.log(v);\n    }\n  },\n  init: function(){\n    \n    // Register this for datatables sort\n    var myself = this;\n    $.fn.dataTableExt.oSort[this.name+\u0027-asc\u0027] = function(a,b){\n    return myself.sort(a,b)\n    };\n    $.fn.dataTableExt.oSort[this.name+\u0027-desc\u0027] = function(a,b){\n    return myself.sort(b,a)\n    };   \n  }, \n  sort: function(a,b){\n    return this.sumStrArray(a) - this.sumStrArray(b);\n  }, \n\n  implementation: function (tgt, st, opt) {\n    var t = $(tgt);\n    var value = st.value;\n    var text = $(\u0022\u003Cinput/\u003E\u0022).attr({value:value, type:\u0027text\u0027, class:\u0027editBox\u0027})\n    .keyup(function(event){\n      if (event.keyCode == 13) {\n        opt.action( $(this).val(), st );\n      }\n      /*var idx = this.parentNode.parentNode.rowIndex;\n      metadataParam[idx-1][1] = $(this).val();*/\n      var obj = this.parentNode.parentNode.children[0].textContent;\n      metadataParam[obj.toString()] = $(this).val();\n    });\n    \n    t.empty();\n    t.append(text);\n  }\n  };\n  Dashboards.registerAddIn(\u0022Table\u0022, \u0022colType\u0022, new AddIn(editable));\n  \n})();\n\n$(document).ready(function() {\n  $(\u0027.chzn-results li\u0027).click(function() {\n    $(this).closest(\u0027.chzn-results\u0027).find(\u0027.result-relected\u0027).removeClass(\u0027result-selected\u0027);\n  });\n  \n  if($(\u0027#uploaderObj_file\u0027).val() != \u0022\u0022){\n      $(\u0027.submitBtn\u0027).attr(\u0022disabled\u0022, false);\n      $( \u0022#uploadInstBtn\u0022 ).removeClass( \u0022disabledBtn\u0022 ).addClass(\u0027submitBtn\u0027);\n  }else{\n      $(\u0027.submitBtn\u0027).attr(\u0022disabled\u0022, true);\n      $( \u0022#uploadInstBtn\u0022 ).removeClass(\u0027submitBtn\u0027).addClass( \u0022disabledBtn\u0022 );\n  }\n  \n  $(\u0027#uploaderObj_file\u0027).change(function() {\n    $(\u0027#mytext\u0027).val($(this).val());\n    $( \u0022#uploadInstBtn\u0022 ).removeClass( \u0022disabledBtn\u0022 ).addClass(\u0027submitBtn\u0027);\n    $(\u0027.submitBtn\u0027).attr(\u0022disabled\u0022, false);\n});\n}); "},{"name":"resourceType","type":"Label","value":"Javascript"}],"type":"LayoutResourceCode","typeDesc":"Resource"},{"id":"944da673-1fec-bad5-e69b-91d2bede0cc6","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":"ManagerCSS"},{"name":"resourceCode","type":"Resource","value":"h2{font-size:36px;font-family:\u0022Open Sans\u0022;margin:0px;padding-top: 10px;}\r\nh5{border-bottom: 1px solid #1973bc; font-size:18px; color:#1973bc;font-family:\u0022Open Sans\u0022;margin-bottom:20px;}\r\ntextarea{width:463px;height:28px;padding:0;padding-left:10px;padding-top: 10px;border: 1px solid #1973bc;resize: none;font-family:\u0022Open Sans\u0022;font-size:14px;color:#B4B4B4;} \r\ntextarea:focus{border: 1px solid #1973bc;}\r\nbutton{float:left;width:165px;height:40px;}\r\ndiv,p{font-family:\u0022Open Sans\u0022;color:#221F1F;} \r\n\r\n#keyValueFormObj{width:475px;} \r\n#submitObj{width:165px;height:auto;float:right; margin-right:200px;} \r\n\r\n#alertDiv{\r\n    margin-bottom: 60px;\r\n}\r\n\r\n.regular{font-weight:400;}\r\n.light{font-weight:300;} \r\n.first{font-size:16px;margin-bottom:20px;}\r\n.second{font-size:14px;margin-bottom:60px;}\r\n.third{font-size:12px;margin-bottom:20px;} \r\n.header{margin-top:20px;margin-bottom:60px;}\r\n.header img{float: left;margin-right: 42px;} \r\n.second div{margin-bottom:20px;} \r\n\r\ninput[type=\u0022image\u0022]{margin-top:6px;width:165px;height:40px;} \r\n\r\n#uploadForm .submitBtn{\r\n    position: absolute;\r\n    background-image: url(\u0022/pentaho/api/repos/fusion_plugin/resources/upload_normal.png\u0022);\r\n    background-repeat: no-repeat;\r\n    background-position: center right;\r\n    height: 40px;\r\n    background-color: #216dbf;\r\n    width: 316px;\r\n    color: #dee8ec;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    border: none;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    border-radius: 4px;\r\n    margin: 10px;\r\n    margin-left: 20px;\r\n    margin-right:0px;\r\n}\r\n\r\n.alert-warning{color:#8a6d3b;background-color:#fcf8e3;border-color:#faebcc}\r\n.alert-danger{color:#a94442;background-color:#f2dede;border-color:#ebccd1}\r\n\r\n.disabledBtn{\r\n    position: absolute;\r\n    background-image: url(\u0022/pentaho/api/repos/fusion_plugin/resources/upload_normal.png\u0022);\r\n    background-repeat: no-repeat;\r\n    background-position: center right;\r\n    height: 40px;\r\n    background-color: #8dbff4;\r\n    width: 316px;\r\n    color: #dee8ec;\r\n    font-size: 16px;\r\n    text-align: center;\r\n    border: none;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    border-radius: 4px;\r\n    margin: 10px;\r\n    margin-left: 20px;\r\n    margin-right:0px;\r\n}\r\n\r\n#fakeButton {\r\n    float: left;\r\n    background-color: #C64D00;\r\n    color: #dee8ec;\r\n    padding: 5px;\r\n    border-radius: 4px;\r\n    height: 30px;\r\n    font: 16px Arial;\r\n    /* margin-left: 10px; */\r\n    margin-right: 20px;\r\n    margin-top: 10px;\r\n    width: 165px;\r\n    text-align: center;\r\n} \r\n\r\n#mytext{\r\n    margin-top: 11px;\r\n    margin-bottom: 10px;\r\n    width: 405px;\r\n    height: 28px;\r\n    padding: 0;\r\n    padding-left: 10px;\r\n    padding-top: 10px;\r\n    border: 1px solid #1973bc;\r\n    resize: none;\r\n    font-family: \u0022Open Sans\u0022;\r\n    font-size: 14px;\r\n    color: #B4B4B4;\r\n} \r\n\r\n#uploaderObj{\r\n    height: 120px;\r\n} \r\n\r\n#select{\r\n    width: 170px;\r\n    height: 30px;\r\n    display: block;\r\n    font-weight: normal;\r\n    /* text-align: center; */\r\n    padding-top: 6px;\r\n} "},{"name":"resourceType","type":"Label","value":"Css"}],"type":"LayoutResourceCode","typeDesc":"Resource"},{"id":"725c9bc8-d3f7-d96b-598a-d4e18a46522c","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":""},{"name":"height","type":"Integer","value":""},{"name":"backgroundColor","type":"Color","value":""},{"name":"roundCorners","type":"RoundCorners","value":""},{"name":"textAlign","type":"TextAlign","value":""},{"name":"cssClass","type":"String","value":""}],"type":"LayoutRow","typeDesc":"Row"},{"id":"20e5cdb6-08bb-6a49-6b59-941cc09d5efc","parent":"725c9bc8-d3f7-d96b-598a-d4e18a46522c","properties":[{"name":"name","type":"Id","value":"title"},{"name":"html","type":"Html","value":"\u003Clink href=\u0027http://fonts.googleapis.com/css?family=Open+Sans:300,400\u0027 rel=\u0027stylesheet\u0027 type=\u0027text/css\u0027\u003E\n\n\u003Cdiv class=\u0022header\u0022\u003E\n    \u003Cimg width=\u0022auto\u0022 height=\u002270\u0022 src=\u0022../../../api/repos/fusion_plugin/static/custom/img/Logo-FusionChartsPlugin.png\u0022\u003E\n    \u003Ch2 class=\u0022light\u0022\u003EFusion Charts Plugin Settings\u003C/h2\u003E\n\u003C/div\u003E\n    \n\n "},{"name":"fontSize","type":"Integer","value":""},{"name":"color","type":"Color","value":""},{"name":"cssClass","type":"String","value":""}],"type":"LayoutHtml","typeDesc":"Html"},{"id":"a8f8f655-ca77-2742-3ff9-c4c626d96e91","parent":"UnIqEiD","properties":[{"name":"name","type":"Id","value":""},{"name":"height","type":"Integer","value":""},{"name":"backgroundColor","type":"Color","value":""},{"name":"roundCorners","type":"RoundCorners","value":""},{"name":"textAlign","type":"TextAlign","value":""},{"name":"cssClass","type":"String","value":""}],"type":"LayoutRow","typeDesc":"Row"},{"id":"95725891-50bc-a419-9f2c-a9b227d448d1","parent":"a8f8f655-ca77-2742-3ff9-c4c626d96e91","properties":[{"name":"name","type":"Id","value":""},{"name":"columnSpan","type":"Integer","value":""},{"name":"columnPrepend","type":"Integer","value":""},{"name":"columnAppend","type":"Integer","value":""},{"name":"columnPrependTop","type":"Boolean","value":"false"},{"name":"columnAppendBottom","type":"Boolean","value":"false"},{"name":"columnBorder","type":"Boolean","value":"false"},{"name":"columnBigBorder","type":"Boolean","value":"false"},{"name":"height","type":"Integer","value":""},{"name":"backgroundColor","type":"Color","value":""},{"name":"roundCorners","type":"RoundCorners","value":""},{"name":"textAlign","type":"TextAlign","value":""},{"name":"cssClass","type":"String","value":"row clearfix"}],"type":"LayoutColumn","typeDesc":"Column"},{"id":"39239ae9-dda4-6e30-3306-b39b0a368e27","parent":"95725891-50bc-a419-9f2c-a9b227d448d1","properties":[{"name":"name","type":"Id","value":""},{"name":"html","type":"Html","value":"\u003Ch5 class=\u0022light\u0022\u003ERegister a License\u003C/h5\u003E \n\n\u003Cdiv class=\u0022light first\u0022\u003E\n    This page can be used to install the free license you have requested from Xpand IT website.\n    You\u0027re just 1 step to start using the best looking graphics library in the industry.\n    \u003Cbr\u003E\n    \u003Cdiv class=\u0022regular\u0022\u003EPlease insert your key and enjoy!\u003C/div\u003E\n\u003C/div\u003E\n\n\u003Cdiv id=\u0022submitObj\u0022\u003E\n    \u003Cinput id=\u0022updateimg\u0022 type=\u0022image\u0022 onclick=\u0022f();\u0022 src=\u0022../../../api/repos/fusion_plugin/static/custom/img/update-button-disable.png\u0022 alt=\u0022update\u0022\u003E    \n\u003C/div\u003E\n\u003Cdiv id=\u0022keyValueFormObj\u0022\u003E\u003C/div\u003E\n\u003Cdiv id=\u0022alertDiv\u0022\u003E\u003C/div\u003E\n\n\u003Cdiv class=\u0022second\u0022\u003E\n    \u003Cdiv class=\u0022light\u0022\u003E\n        If you still haven\u0027t got a key please go to the plugin page and fill the form:\n    \u003C/div\u003E\n    \u003Ca href=\u0022http://www.xpand-it.com/en/products/fusioncharts-plugin-for-pentaho\u0022 target=\u0022_blank\u0022\u003E\n        \u003Cimg src=\u0022../../../api/repos/fusion_plugin/static/custom/img/pluginpage-button.png\u0022 alt=\u0022plugin page\u0022 width=\u0022165\u0022 height=\u002240\u0022\u003E\n    \u003C/a\u003E \n\u003C/div\u003E\n\n\u003Cdiv id=\u0022installXT\u0022 style=\u0022display: none\u0022\u003E\n  \u003Ch5 class=\u0022light\u0022\u003EFusionCharts XT Installation\u003C/h5\u003E\n  \n  \u003Cdiv class=\u0022light first\u0022\u003E\n    This section allows you to automatically install the licensed version of FusionCharts, either the suite or any of the individual packages. First you need to obtain the FusionCharts XT zip file by acquiring a  \u003Ca href=\u0022http://www.xpand-it.com/en/technology/fusioncharts\u0022 target=\u0022_blank\u0022\u003E FusionCharts license \u003C/a\u003E  or by downloading a  \u003Ca href=\u0022 http://www.fusioncharts.com/download/\u0022 target=\u0022_blank\u0022\u003Efree trial\u003C/a\u003E \u003Cbr\u003E\n    \u003Cdiv class=\u0022regular\u0022\u003E Click on select file, choose the zip file and then click on the upload button.  \u003C/div\u003E\n    \u003C/div\u003E\n\u003C/div\u003E\n\n\u003Cdiv class=\u0022light third\u0022\u003E\n    Xpand IT supports Pentaho FusionCharts Plugin.\n    \u003Cbr\u003E\n    Learn more at: \u003Ca href=\u0022https://github.com/xpandit/pentaho-fc-plugin/wiki\u0022 target=\u0022blank\u0022\u003EWiki Documentation\u003C/a\u003E\n    \u003Cbr\u003E\n    If you need more information, sharing ideas or discuss plan details, please reach us by email\n    \u003Ca href=\u0022mailto:marketing@xpand-it.com\u0022 target=\u0022_top\u0022 class=\u0022regular\u0022\u003Epentaho@xpand-it.com\u003C/a\u003E\n\u003C/div\u003E\n\n\u003Cdiv class=\u0022logos\u0022\u003E\n    \u003Cimg width=\u0022150\u0022 height=\u002233\u0022 src=\u0022../../../api/repos/fusion_plugin/static/custom/img/logo-xpand.png\u0022\u003E\n\u003C/div\u003E \n "},{"name":"fontSize","type":"Integer","value":""},{"name":"color","type":"Color","value":""},{"name":"cssClass","type":"String","value":""}],"type":"LayoutHtml","typeDesc":"Html"}],"title":"1 - Empty Sample"}}